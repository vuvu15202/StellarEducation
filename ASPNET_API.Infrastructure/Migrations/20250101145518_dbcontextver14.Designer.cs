// <auto-generated />
using System;
using ASPNET_API.Models.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ASPNET_API.Migrations
{
    [DbContext(typeof(DonationWebApp_v2Context))]
    [Migration("20250101145518_dbcontextver14")]
    partial class dbcontextver14
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ASPNET_API.Models.Entity.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHide")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.ConsultationRequest", b =>
                {
                    b.Property<int?>("ConsultationRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("ConsultationRequestId"), 1L, 1);

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<bool>("IsResolved")
                        .HasColumnType("bit")
                        .HasColumnName("IsResolved");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhoneNumber");

                    b.Property<int?>("ResolvedById")
                        .HasColumnType("int")
                        .HasColumnName("ResolvedById");

                    b.HasKey("ConsultationRequestId");

                    b.HasIndex("ResolvedById");

                    b.ToTable("ConsultationRequest", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.ExamCandidate", b =>
                {
                    b.Property<int>("ExamCandidateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExamCandidateId"), 1L, 1);

                    b.Property<double?>("BandScoreListening")
                        .HasColumnType("float")
                        .HasColumnName("bandScoreListening");

                    b.Property<double?>("BandScoreReading")
                        .HasColumnType("float")
                        .HasColumnName("bandScoreReading");

                    b.Property<double?>("BandScoreSpeaking")
                        .HasColumnType("float")
                        .HasColumnName("bandScoreSpeaking");

                    b.Property<double?>("BandScoreWriting")
                        .HasColumnType("float")
                        .HasColumnName("bandScoreWriting");

                    b.Property<int>("CandidateId")
                        .HasColumnType("int")
                        .HasColumnName("candidateId");

                    b.Property<int?>("CorrectAnswersListening")
                        .HasColumnType("int");

                    b.Property<int?>("CorrectAnswersReading")
                        .HasColumnType("int");

                    b.Property<int?>("CorrectAnswersSpeaking")
                        .HasColumnType("int");

                    b.Property<int?>("CorrectAnswersWriting")
                        .HasColumnType("int");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<double?>("Overall")
                        .HasColumnType("float")
                        .HasColumnName("overall");

                    b.Property<int>("QuestionBankId")
                        .HasColumnType("int")
                        .HasColumnName("questionBankId");

                    b.Property<DateTime?>("StartExamDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("SubmitedDate")
                        .HasColumnType("date");

                    b.Property<string>("SubmitedListening")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmitedReading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmitedSpeaking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubmitedWriting")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExamCandidateId");

                    b.HasIndex("CandidateId");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("ExamCandidate", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"), 1L, 1);

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit")
                        .HasColumnName("IsRead");

                    b.Property<DateTime>("NotificationAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("NotificationContent")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("NotificationTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NotificationTo")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("NotificationTo");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.QuestionBank", b =>
                {
                    b.Property<int>("QuestionBankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("questionBankId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionBankId"), 1L, 1);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("ExamCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("examCode");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit")
                        .HasColumnName("isPrivate");

                    b.Property<int?>("LecturerId")
                        .HasColumnType("int")
                        .HasColumnName("LecturerId");

                    b.Property<string>("Listening")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reading")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speaking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Writing")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionBankId");

                    b.HasIndex("LecturerId");

                    b.ToTable("QuestionBank", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.Reply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHide")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.ToTable("Reply", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("RoleId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.StudentFee", b =>
                {
                    b.Property<string>("StudentFeeId")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Amount")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("BankCode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("CourseEnrollId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfPaid")
                        .HasColumnType("datetime");

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("LocalMessage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OrderInfo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("StudentFeeId");

                    b.HasIndex("CourseEnrollId")
                        .IsUnique()
                        .HasFilter("[CourseEnrollId] IS NOT NULL");

                    b.ToTable("StudentFee", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 1L, 1);

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("EnrollDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("EnrollDate");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"), 1L, 1);

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.temp.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.temp.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("Price")
                        .HasColumnType("bigint");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.temp.CourseEnroll", b =>
                {
                    b.Property<int>("CourseEnrollId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CourseEnrollID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CourseEnrollId"), 1L, 1);

                    b.Property<float?>("AverageGrade")
                        .HasColumnType("real")
                        .HasColumnName("AverageGrade");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("CourseStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("date");

                    b.Property<string>("Grade")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LessonCurrent")
                        .HasColumnType("int");

                    b.Property<string>("Quiz")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StudentFeeId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CourseEnrollId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseEnroll", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.temp.Lesson", b =>
                {
                    b.Property<int>("LessonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LessonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LessonId"), 1L, 1);

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<string>("Description")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<int?>("LessonNum")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PreviousLessioNum")
                        .HasColumnType("int");

                    b.Property<int?>("QuestionBankId")
                        .HasColumnType("int");

                    b.Property<string>("Quiz")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("LessonId");

                    b.HasIndex("CourseId");

                    b.HasIndex("QuestionBankId");

                    b.ToTable("Lesson", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.temp.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReviewId"), 1L, 1);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<int>("CourseId")
                        .HasColumnType("int")
                        .HasColumnName("CourseID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("Vote")
                        .HasColumnType("int");

                    b.HasKey("ReviewId");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.ConsultationRequest", b =>
                {
                    b.HasOne("ASPNET_API.Models.Entity.User", "ResolvedBy")
                        .WithMany("ResolvedConsultationRequests")
                        .HasForeignKey("ResolvedById")
                        .HasConstraintName("FK_ConsultationRequest_User");

                    b.Navigation("ResolvedBy");
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.ExamCandidate", b =>
                {
                    b.HasOne("ASPNET_API.Models.Entity.User", "Candidate")
                        .WithMany("ExamCandidates")
                        .HasForeignKey("CandidateId")
                        .IsRequired()
                        .HasConstraintName("FK_ExamCandidate_User");

                    b.HasOne("ASPNET_API.Models.Entity.QuestionBank", "QuestionBank")
                        .WithMany("ExamCandidates")
                        .HasForeignKey("QuestionBankId")
                        .IsRequired()
                        .HasConstraintName("FK_ExamCandidate_QuestionBank");

                    b.Navigation("Candidate");

                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.Notification", b =>
                {
                    b.HasOne("ASPNET_API.Models.Entity.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("NotificationTo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Notification_User");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.QuestionBank", b =>
                {
                    b.HasOne("ASPNET_API.Models.Entity.User", "Lecturer")
                        .WithMany("QuestionBanks")
                        .HasForeignKey("LecturerId")
                        .HasConstraintName("FK_QuestionBank_User");

                    b.Navigation("Lecturer");
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.Reply", b =>
                {
                    b.HasOne("ASPNET_API.Models.Entity.Comment", "Comment")
                        .WithMany("Replies")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.StudentFee", b =>
                {
                    b.HasOne("ASPNET_API.temp.CourseEnroll", "CourseEnroll")
                        .WithOne("StudentFee")
                        .HasForeignKey("ASPNET_API.Models.Entity.StudentFee", "CourseEnrollId")
                        .HasConstraintName("FK_CE_SF");

                    b.Navigation("CourseEnroll");
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.UserRole", b =>
                {
                    b.HasOne("ASPNET_API.Models.Entity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_Role");

                    b.HasOne("ASPNET_API.Models.Entity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRole_User");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASPNET_API.temp.Course", b =>
                {
                    b.HasOne("ASPNET_API.temp.Category", "Category")
                        .WithMany("Courses")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Course_CategoryID");

                    b.HasOne("ASPNET_API.Models.Entity.UserRole", "UserRole")
                        .WithMany("Courses")
                        .HasForeignKey("UserRoleId")
                        .IsRequired()
                        .HasConstraintName("fk_lecture");

                    b.Navigation("Category");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("ASPNET_API.temp.CourseEnroll", b =>
                {
                    b.HasOne("ASPNET_API.temp.Course", "Course")
                        .WithMany("CourseEnrolls")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseEnroll_CourseID");

                    b.HasOne("ASPNET_API.Models.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CourseEnroll_UserID");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASPNET_API.temp.Lesson", b =>
                {
                    b.HasOne("ASPNET_API.temp.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Lesson_CourseID");

                    b.HasOne("ASPNET_API.Models.Entity.QuestionBank", "QuestionBank")
                        .WithMany("Lessons")
                        .HasForeignKey("QuestionBankId")
                        .HasConstraintName("FK_Lesson_QuestionBank");

                    b.Navigation("Course");

                    b.Navigation("QuestionBank");
                });

            modelBuilder.Entity("ASPNET_API.temp.Review", b =>
                {
                    b.HasOne("ASPNET_API.temp.Course", "Course")
                        .WithMany("Reviews")
                        .HasForeignKey("CourseId")
                        .IsRequired()
                        .HasConstraintName("FK_Review_CourseID");

                    b.HasOne("ASPNET_API.Models.Entity.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Review_UserID");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.QuestionBank", b =>
                {
                    b.Navigation("ExamCandidates");

                    b.Navigation("Lessons");
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.User", b =>
                {
                    b.Navigation("ExamCandidates");

                    b.Navigation("Notifications");

                    b.Navigation("QuestionBanks");

                    b.Navigation("ResolvedConsultationRequests");

                    b.Navigation("Reviews");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("ASPNET_API.Models.Entity.UserRole", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("ASPNET_API.temp.Category", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("ASPNET_API.temp.Course", b =>
                {
                    b.Navigation("CourseEnrolls");

                    b.Navigation("Lessons");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("ASPNET_API.temp.CourseEnroll", b =>
                {
                    b.Navigation("StudentFee");
                });
#pragma warning restore 612, 618
        }
    }
}
